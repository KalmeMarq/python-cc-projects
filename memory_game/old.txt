# class TextureManager:
#   def __init__(self):
#     self.textures: Dict[str, GLuint] = {}

#   def load(self, path: str) -> None:
#     im = Image.open("res/" + path);
#     imdata = np.frombuffer(im.convert("RGBA").tobytes(), np.uint8)

#     txr_id = glGenTextures(1)
#     glBindTexture(GL_TEXTURE_2D, txr_id)
#     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
#     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
#     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT)
#     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT)
#     glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, im.width, im.height, 0, GL_RGBA, GL_UNSIGNED_BYTE, imdata)
#     glBindTexture(GL_TEXTURE_2D, 0)
#     self.textures[path] = txr_id

#   def get(self, path: str) -> GLuint:
#     return self.textures[path]
    
#   def dispose(self) -> None:
#     for txr_id in self.textures.values():
#       glDeleteTextures([txr_id])

 # xa = 0
      # ya = 0
      # za = 0

      # if glfw.get_key(self.window, glfw.KEY_W) != glfw.RELEASE:
      #   za -= 1
      
      # if glfw.get_key(self.window, glfw.KEY_S) != glfw.RELEASE:
      #   za += 1

      # if glfw.get_key(self.window, glfw.KEY_A) != glfw.RELEASE:
      #   xa -= 1
      
      # if glfw.get_key(self.window, glfw.KEY_D) != glfw.RELEASE:
      #   xa += 1

      # if glfw.get_key(self.window, glfw.KEY_RIGHT_SHIFT) != glfw.RELEASE or glfw.get_key(self.window, glfw.KEY_LEFT_SHIFT) != glfw.RELEASE:
      #   ya -= 1
      
      # if glfw.get_key(self.window, glfw.KEY_SPACE) != glfw.RELEASE:
      #   ya += 1

      # xa *= 0.61
      # za *= 0.61

      # psin = math.sin(self.player.rot_y * math.pi / 180.0);
      # pcos = math.cos(self.player.rot_y * math.pi / 180.0);

      # if self.world.get_tile(int(self.player.x), int(self.player.y) - 2, int(self.player.z)) == 0:
      #   ya -= 1
      # else:
      #   ya = 0
  
      # self.player.x += xa * pcos - za * psin
      # self.player.y += ya
      # self.player.z += za * pcos + xa * psin

# TILE_TYPES: Dict[int, TileType] = {}

# class TileType:
#   def __init__(self, tile_id: int, down_txr: int, up_txr: int, north_txr: int, south_txr: int, west_txr: int, east_txr: int, is_tickable = False) -> None:
#     self.tile_id = tile_id
#     self.down_txr = down_txr
#     self.up_txr = up_txr
#     self.north_txr = north_txr
#     self.south_txr = south_txr
#     self.west_txr = west_txr
#     self.east_txr = east_txr
#     self.is_tickable = False 

#   def render_in_gui(self, vertex_drawer: VertexDrawer):
#     tile = self.tile_id
#     x0 = 0.0
#     y0 = 0.0
#     z0 = 0.0
#     x1 = 1.0
#     y1 = 1.0
#     z1 = 1.0

#     if tile == 7:
#       y1 -= 0.1

#     u = (self.down_txr % 3) * 16
#     v = self.down_txr // 3 * 16

#     u0 = u / 48.0
#     v0 = v / 64.0
#     u1 = (u + 16) / 48.0
#     v1 = (v + 16) / 64.0

#     vertex_drawer.color(0.6, 0.6, 0.6, 1.0)
#     vertex_drawer.vertex_uv(x0, y0, z1, u0, v1)
#     vertex_drawer.vertex_uv(x0, y0, z0, u0, v0)
#     vertex_drawer.vertex_uv(x1, y0, z0, u1, v0)
#     vertex_drawer.vertex_uv(x1, y0, z1, u1, v1)

#     u = (self.up_txr % 3) * 16
#     v = self.up_txr // 3 * 16

#     u0 = u / 48.0
#     v0 = v / 64.0
#     u1 = (u + 16) / 48.0
#     v1 = (v + 16) / 64.0

#     vertex_drawer.color(1.0, 1.0, 1.0, 1.0)
#     vertex_drawer.vertex_uv(x1, y1, z1, u1, v1)
#     vertex_drawer.vertex_uv(x1, y1, z0, u1, v0)
#     vertex_drawer.vertex_uv(x0, y1, z0, u0, v0)
#     vertex_drawer.vertex_uv(x0, y1, z1, u0, v1)

#     u = (self.north_txr % 3) * 16
#     v = self.north_txr // 3 * 16

#     u0 = u / 48.0
#     v0 = v / 64.0
#     u1 = (u + 16) / 48.0
#     v1 = (v + 16) / 64.0
    
#     vertex_drawer.color(0.6, 0.6, 0.6, 1.0)
#     vertex_drawer.vertex_uv(x0, y1, z0, u1, v0)
#     vertex_drawer.vertex_uv(x1, y1, z0, u0, v0)
#     vertex_drawer.vertex_uv(x1, y0, z0, u0, v1)
#     vertex_drawer.vertex_uv(x0, y0, z0, u1, v1)

#     u = (self.south_txr % 3) * 16
#     v = self.south_txr // 3 * 16

#     u0 = u / 48.0
#     v0 = v / 64.0
#     u1 = (u + 16) / 48.0
#     v1 = (v + 16) / 64.0

#     vertex_drawer.color(0.6, 0.6, 0.6, 1.0)
#     vertex_drawer.vertex_uv(x0, y1, z1, u0, v0)
#     vertex_drawer.vertex_uv(x0, y0, z1, u0, v1)
#     vertex_drawer.vertex_uv(x1, y0, z1, u1, v1)
#     vertex_drawer.vertex_uv(x1, y1, z1, u1, v0)

#     u = (self.west_txr % 3) * 16
#     v = self.west_txr // 3 * 16

#     u0 = u / 48.0
#     v0 = v / 64.0
#     u1 = (u + 16) / 48.0
#     v1 = (v + 16) / 64.0

#     vertex_drawer.color(0.8, 0.8, 0.8, 1.0)
#     vertex_drawer.vertex_uv(x0, y1, z1, u1, v0)
#     vertex_drawer.vertex_uv(x0, y1, z0, u0, v0)
#     vertex_drawer.vertex_uv(x0, y0, z0, u0, v1)
#     vertex_drawer.vertex_uv(x0, y0, z1, u1, v1)

#     u = (self.east_txr % 3) * 16
#     v = self.east_txr // 3 * 16

#     u0 = u / 48.0
#     v0 = v / 64.0
#     u1 = (u + 16) / 48.0
#     v1 = (v + 16) / 64.0

#     vertex_drawer.color(0.8, 0.8, 0.8, 1.0)
#     vertex_drawer.vertex_uv(x1, y0, z1, u0, v1)
#     vertex_drawer.vertex_uv(x1, y0, z0, u1, v1)
#     vertex_drawer.vertex_uv(x1, y1, z0, u1, v0)
#     vertex_drawer.vertex_uv(x1, y1, z1, u0, v0)

#   def random_tick(self, world: World, x, y, z, tile_id):
#     if tile_id == 7:
#       if world.get_tile(x - 1, y, z) == 0:
#         world.set_tile(x - 1, y, z, 7)

#       if world.get_tile(x + 1, y, z) == 0:
#         world.set_tile(x + 1, y, z, 7)

#       if world.get_tile(x, y, z - 1) == 0:
#         world.set_tile(x, y, z - 1, 7)

#       if world.get_tile(x, y, z + 1) == 0:
#         world.set_tile(x, y, z + 1, 7)

#       if world.get_tile(x, y - 1, z) == 0:
#         world.set_tile(x, y - 1, z, 7)

# TILE_TYPES[1] = TileType(1, 1, 3, 0, 0, 0, 0) # GRASS BLOCK
# TILE_TYPES[2] = TileType(2, 1, 1, 1, 1, 1, 1) # DIRT
# TILE_TYPES[3] = TileType(3, 4, 4, 4, 4, 4, 4) # STONE
# TILE_TYPES[4] = TileType(4, 2, 2, 5, 5, 5, 5) # LOG
# TILE_TYPES[5] = TileType(5, 6, 6, 6, 6, 6, 6) # PLANKS
# TILE_TYPES[6] = TileType(6, 7, 7, 7, 7, 7, 7) # SAND
# TILE_TYPES[7] = TileType(7, 8, 8, 8, 8, 8, 8) # WATER
# TILE_TYPES[8] = TileType(8, 11, 11, 11, 11, 11, 11) # LEAVES
# TILE_TYPES[9] = TileType(10, 9, 9, 9, 9, 9, 9) # FLOWER


# class RenderLayer:
#   def __init__(self, index: int, begin_callback, end_callback) -> None:
#     self.__value = index
#     self.__begin_callback = begin_callback
#     self.__end_callback = end_callback

#   def begin(self):
#     self.__begin_callback()

#   def end(self):
#     self.__end_callback()

#   @property
#   def value(self):
#     return self.__value

#   def begin_solid_phase():
#     glDisable(GL_BLEND)

#   def end_solid_phase():
#     pass

#   def begin_translucent_phase():
#     glEnable(GL_BLEND)
#     glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)

#   def end_translucent_phase():
#     glDisable(GL_BLEND)

#   def __eq__(self, __value: object) -> bool:
#     return isinstance(__value, RenderLayer) and __value.value == self.value

# RenderLayers = {
#   'SOLID': RenderLayer(0, RenderLayer.begin_solid_phase, RenderLayer.end_solid_phase),
#   'TRANSLUCENT': RenderLayer(1, RenderLayer.begin_translucent_phase, RenderLayer.end_translucent_phase)
# }